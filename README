12 May 2014

The process is still very "hands on" and requires some skill,
knowledge, and/or experience.  Nevertheless, the current version
is capable of producing working code with a manual sequence like
the following:

	as09 -o start.o start.s
	bcc09 -o prog.o -c prog.c
	ld09 -d -o prog.bin -T0x1000 start.o prog.o
	objcopy --change-address=0x1000 -I binary -O srec prog.bin prog.s19

The resulting binary can be loaded onto your 6809-based target device
using whatever tools you have available to you.  Loading that code
and making it all work remains as an exercise for the reader...

Syntax for the assembler seems to be inspired by (and may be compatible
with) that described in section C.5 of "INTROL-C COMPILER REFERENCE
MANUAL", available here:

	http://www.swtpc.com/mholley/Introl/REF.pdf

Many of the notes in section C.C seem relevant to BCC's 6809 code
generator as well, particular those on "REGISTER USAGE" and "PARAMETER
PASSING CONVENTIONS".  YMMV, of course...

The object file format produced by the assembler and consumed by the
linker is the "INTROL LINKABLE BINARY FILE FORMAT", documented in
"INTROL LINKER AND LOADER REFERENCE MANUAL", available here:

	http://www.swtpc.com/mholley/Introl/LOAD.pdf

So theoretically, object modules should be compatible with objects
generated by the Introl-C/6809 toolchain -- YMMV!  The calling
conventions would still need to match, of course.  Given the
observations above, those conventions may in fact be the same...

Please feel free to try things out and to let me know about your
successes or failures.  If you find something that does not compile or
which compiles incorrectly, I would welcome you to send me a minimal
source file that exhibits the problem along with a description of
what you are attempting to achieve.

Thanks,

John
--
John W. Linville		Someday the world will need a hero, and you
linville@tuxdriver.com			might be all we have.  Be ready.
